# Shortcuts and links used throughout the documentation.

# Links to software tools, etc.
repo:                 "[repository](https://github.com/nessan/lulu)"
docs:                 "[documentation](https://nessan.github.io/lulu)"
email:                "[email](mailto:nzznfitz+gh@icloud.com)"
mit-license:          "[MIT License](https://opensource.org/license/mit)"
quarto:               "[Quarto](https://quarto.org)"
penlight:             "[Penlight](https://github.com/lunarmodules/Penlight)"
LuaRocks:             "[LuaRocks](https://luarocks.org)"
scribe:               "[Scribe](https://nessan.github.io/scribe)"
putln:                "[`scribe.putln`](https://nessan.github.io/scribe/pages/formatted-output.html)"

# The Lua reference manual:
lua:
  table-manipulation: "[Lua's standard table manipulation methods](https://www.lua.org/manual/5.4/manual.html#6.6)"
  pairs:              "[`pairs`](https://www.lua.org/manual/5.4/manual.html#6.6)"
  string:             "[Lua's string library](https://www.lua.org/manual/5.4/manual.html#6.4)"
  string-format:      "[`string.format`](https://www.lua.org/manual/5.4/manual.html#6.4)"

# Formatted links to the module/class overview pages:
lulu:
  Array:              "[`lulu.Array`](/pages/Array/index.qmd)"
  Enum:               "[`lulu.Enum`](/pages/Enum/index.qmd)"
  callable:           "[`lulu.callable`](/pages/callable/index.qmd)"
  messages:           "[`lulu.messages`](/pages/messages/index.qmd)"
  types:              "[`lulu.types`](/pages/types/index.qmd)"
  paths:              "[`lulu.paths`](/pages/paths/index.qmd)"
  scribe:             "[`lulu.scribe`](https://nessan.github.io/scribe)"
  lpeg:               "[`lulu.xpeg`](/pages/lpeg/index.qmd)"
  string:             "[`lulu.string`](/pages/string/index.qmd)"
  table:              "[`lulu.table`](/pages/table/index.qmd)"

# Formatted links for the functions in the `messages` module.
message:
  fatal:              "[`lulu.fatal`](/pages/messages/index.qmd)"
  info:               "[`lulu.info`](/pages/messages/index.qmd)"
  message:            "[`lulu.message`](/pages/messages/index.qmd)"
  source_info:        "[`lulu.source_info`](/pages/messages/index.qmd)"
  warn:               "[`lulu.warn`](/pages/messages/index.qmd)"

# Formatted links for the functions in the `paths` module.
paths:
  components:         "[`paths.components`](/pages/paths/index.qmd)"
  basename:           "[`paths.basename`](/pages/paths/index.qmd)"
  dirname:            "[`paths.dirname`](/pages/paths/index.qmd)"
  extension:          "[`paths.extension`](/pages/paths/index.qmd)"
  filename:           "[`paths.filename`](/pages/paths/index.qmd)"
  script_name:        "[`paths.script_name`](/pages/paths/index.qmd)"
  script_path:        "[`paths.script_path`](/pages/paths/index.qmd)"
  os_directory_separator: "[`paths.os_directory_separator`](/pages/paths/index.qmd)"
  is_windows:         "[`paths.is_windows`](/pages/paths/index.qmd)"
  is_unix:            "[`paths.is_unix`](/pages/paths/index.qmd)"
  is_posix:           "[`paths.is_posix`](/pages/paths/index.qmd)"
  exists:             "[`paths.exists`](/pages/paths/index.qmd)"
  is_directory:       "[`paths.is_directory`](/pages/paths/index.qmd)"
  join:               "[`paths.join`](/pages/paths/index.qmd)"

# Formatted links for the functions in the `callable` module.
callable:
  callable:			      "[`callable`](/pages/callable/index.qmd)"
  is_callable:		    "[`callable.is_callable`](/pages/callable/index.qmd)"
  lambda:				      "[`callable.lambda`](/pages/callable/index.qmd)"

# Formatted links for the functions in the `types` module.
types:
  is_integer:         "[`types.is_integer`](/pages/types/index.qmd)"
  is_nan:             "[`types.is_nan`](/pages/types/index.qmd)"
  is_negative_integer: "[`types.is_negative_integer`](/pages/types/index.qmd)"
  is_positive_integer: "[`types.is_positive_integer`](/pages/types/index.qmd)"
  type:               "[`types.type`](/pages/types/index.qmd)"

# Formatted links for the functions in the `string` module.
string:
  add_escapes:        "[`string.add_escapes`](/pages/string/index.qmd)"
  after:              "[`string.after`](/pages/string/index.qmd)"
  all_delimited:      "[`string.all_delimited`](/pages/string/index.qmd)"
  all_quoted:         "[`string.all_quoted`](/pages/string/index.qmd)"
  append:             "[`string.append`](/pages/string/index.qmd)"
  before:             "[`string.before`](/pages/string/index.qmd)"
  change:             "[`string.change`](/pages/string/index.qmd)"
  collapse_ws:        "[`string.collapse_ws`](/pages/string/index.qmd)"
  contains:           "[`string.contains`](/pages/string/index.qmd)"
  contains_delimited: "[`string.contains_delimited`](/pages/string/index.qmd)"
  contains_quoted:    "[`string.contains_quoted`](/pages/string/index.qmd)"
  contains_word:      "[`string.contains_word`](/pages/string/index.qmd)"
  dedent_lines:       "[`string.dedent_lines`](/pages/string/index.qmd)"
  delete:             "[`string.delete`](/pages/string/index.qmd)"
  delete_ws:          "[`string.delete_ws`](/pages/string/index.qmd)"
  ellipsis:           "[`string.ellipsis`](/pages/string/index.qmd)"
  ends_with:          "[`string.ends_with`](/pages/string/index.qmd)"
  ensure_end:         "[`string.ensure_end`](/pages/string/index.qmd)"
  ensure_start:       "[`string.ensure_start`](/pages/string/index.qmd)"
  first_delimited:    "[`string.first_delimited`](/pages/string/index.qmd)"
  first_quoted:       "[`string.first_quoted`](/pages/string/index.qmd)"
  from_hex:           "[`string.from_hex`](/pages/string/index.qmd)"
  from_lua_pattern:   "[`string.from_lua_pattern`](/pages/string/index.qmd)"
  indent_lines:       "[`string.indent_lines`](/pages/string/index.qmd)"
  is_alpha:           "[`string.is_alpha`](/pages/string/index.qmd)"
  is_alphanumeric:    "[`string.is_alphanumeric`](/pages/string/index.qmd)"
  is_bin:             "[`string.is_bin`](/pages/string/index.qmd)"
  is_blank:           "[`string.is_blank`](/pages/string/index.qmd)"
  is_dec:             "[`string.is_dec`](/pages/string/index.qmd)"
  is_delimited:       "[`string.is_delimited`](/pages/string/index.qmd)"
  is_digit:           "[`string.is_digit`](/pages/string/index.qmd)"
  is_empty:           "[`string.is_empty`](/pages/string/index.qmd)"
  is_escaped:         "[`string.is_escaped`](/pages/string/index.qmd)"
  is_float:           "[`string.is_float`](/pages/string/index.qmd)"
  is_hex:             "[`string.is_hex`](/pages/string/index.qmd)"
  is_int:             "[`string.is_int`](/pages/string/index.qmd)"
  is_lower:           "[`string.is_lower`](/pages/string/index.qmd)"
  is_non_empty:       "[`string.is_non_empty`](/pages/string/index.qmd)"
  is_number:          "[`string.is_number`](/pages/string/index.qmd)"
  is_oct:             "[`string.is_oct`](/pages/string/index.qmd)"
  is_quoted:          "[`string.is_quoted`](/pages/string/index.qmd)"
  is_upper:           "[`string.is_upper`](/pages/string/index.qmd)"
  iter:               "[`string.iter`](/pages/string/index.qmd)"
  kill_from:          "[`string.kill_from`](/pages/string/index.qmd)"
  kill_to:            "[`string.kill_to`](/pages/string/index.qmd)"
  pad_end:            "[`string.pad_end`](/pages/string/index.qmd)"
  pad_start:          "[`string.pad_start`](/pages/string/index.qmd)"
  prepend:            "[`string.prepend`](/pages/string/index.qmd)"
  remove_escapes:     "[`string.remove_escapes`](/pages/string/index.qmd)"
  split:              "[`string.split`](/pages/string/index.qmd)"
  starts_with:        "[`string.starts_with`](/pages/string/index.qmd)"
  strip_comments:     "[`string.strip_comments`](/pages/string/index.qmd)"
  to_array:           "[`string.to_array`](/pages/string/index.qmd)"
  to_blocks:          "[`string.to_blocks`](/pages/string/index.qmd)"
  to_bool:            "[`string.to_bool`](/pages/string/index.qmd)"
  to_hex:             "[`string.to_hex`](/pages/string/index.qmd)"
  to_lines:           "[`string.to_lines`](/pages/string/index.qmd)"
  to_lua_pattern:     "[`string.to_lua_pattern`](/pages/string/index.qmd)"
  to_tokens:          "[`string.to_tokens`](/pages/string/index.qmd)"
  trim:               "[`string.trim`](/pages/string/index.qmd)"
  trim_end:           "[`string.trim_end`](/pages/string/index.qmd)"
  trim_start:         "[`string.trim_start`](/pages/string/index.qmd)"
  trim_ws:            "[`string.trim_ws`](/pages/string/index.qmd)"
  truncate:           "[`string.truncate`](/pages/string/index.qmd)"
  unescape:           "[`string.unescape`](/pages/string/index.qmd)"

# Formatted links for the functions & patterns in the `lpeg` module:
lpeg:
  after_newline:      "[`lpeg.after_newline`](/pages/lpeg/index.qmd)"
  after_set:          "[`lpeg.after_set`](/pages/lpeg/index.qmd)"
  after:              "[`lpeg.after`](/pages/lpeg/index.qmd)"
  alpha:              "[`lpeg.patterns.alpha`](/pages/lpeg/index.qmd)"
  alphanumeric:       "[`lpeg.patterns.alphanumeric`](/pages/lpeg/index.qmd)"
  any:                "[`lpeg.patterns.any`](/pages/lpeg/index.qmd)"
  anywhere:           "[`lpeg.anywhere`](/pages/lpeg/index.qmd)"
  before:             "[`lpeg.before`](/pages/lpeg/index.qmd)"
  bin_digit:          "[`lpeg.patterns.bin_digit`](/pages/lpeg/index.qmd)"
  bin_number:         "[`lpeg.bin_number`](/pages/lpeg/index.qmd)"
  bin:                "[`lpeg.patterns.bin`](/pages/lpeg/index.qmd)"
  blocks:             "[`lpeg.patterns.blocks`](/pages/lpeg/index.qmd)"
  careful_collapse_ws: "[`lpeg.patterns.careful_collapse_ws`](/pages/lpeg/index.qmd)"
  change:             "[`lpeg.change`](/pages/lpeg/index.qmd)"
  collapse_ws:        "[`lpeg.patterns.collapse_ws`](/pages/lpeg/index.qmd)"
  dec_digit:          "[`lpeg.patterns.dec_digit`](/pages/lpeg/index.qmd)"
  dec_number:         "[`lpeg.dec_number`](/pages/lpeg/index.qmd)  "
  dec:                "[`lpeg.patterns.dec`](/pages/lpeg/index.qmd)"
  delete_ws:          "[`lpeg.patterns.delete_ws`](/pages/lpeg/index.qmd)"
  delimited_content:  "[`lpeg.delimited_content`](/pages/lpeg/index.qmd)"
  delimited:          "[`lpeg.delimited`](/pages/lpeg/index.qmd)"
  digit:              "[`lpeg.patterns.digit`](/pages/lpeg/index.qmd)"
  double_quoted_content: "[`lpeg.patterns.double_quoted_content`](/pages/lpeg/index.qmd)"
  double_quoted:      "[`lpeg.patterns.double_quoted`](/pages/lpeg/index.qmd)"
  eol:                "[`lpeg.patterns.eol`](/pages/lpeg/index.qmd)"
  eos:                "[`lpeg.patterns.eos`](/pages/lpeg/index.qmd)"
  esc:                "[`lpeg.patterns.esc`](/pages/lpeg/index.qmd)"
  float_number:       "[`lpeg.float_number`](/pages/lpeg/index.qmd)"
  float:              "[`lpeg.patterns.float`](/pages/lpeg/index.qmd)"
  graph:              "[`lpeg.patterns.graph`](/pages/lpeg/index.qmd)"
  hex_digit:          "[`lpeg.patterns.hex_digit`](/pages/lpeg/index.qmd)"
  hex_number:         "[`lpeg.hex_number`](/pages/lpeg/index.qmd)"
  hex:                "[`lpeg.patterns.hex`](/pages/lpeg/index.qmd)"
  hs:                 "[`lpeg.patterns.hs`](/pages/lpeg/index.qmd)"
  int_number:         "[`lpeg.int_number`](/pages/lpeg/index.qmd)"
  int:                "[`lpeg.patterns.int`](/pages/lpeg/index.qmd)"
  is_escaped:         "[`lpeg.is_escaped`](/pages/lpeg/index.qmd)"
  is_pattern:         "[`lpeg.is_pattern`](/pages/lpeg/index.qmd)"
  lower:              "[`lpeg.patterns.lower`](/pages/lpeg/index.qmd)"
  nl:                 "[`lpeg.patterns.nl`](/pages/lpeg/index.qmd)"
  non_eol:            "[`lpeg.patterns.non_eol`](/pages/lpeg/index.qmd)"
  non_hs:             "[`lpeg.patterns.non_hs`](/pages/lpeg/index.qmd)"
  non_nl:             "[`lpeg.patterns.non_nl`](/pages/lpeg/index.qmd)"
  non_ws:             "[`lpeg.patterns.non_ws`](/pages/lpeg/index.qmd)"
  number:             "[`lpeg.number`](/pages/lpeg/index.qmd)"
  num:                "[`lpeg.patterns.num`](/pages/lpeg/index.qmd)"
  oct_digit:          "[`lpeg.patterns.oct_digit`](/pages/lpeg/index.qmd)"
  oct_number:         "[`lpeg.oct_number`](/pages/lpeg/index.qmd)"
  oct:                "[`lpeg.patterns.oct`](/pages/lpeg/index.qmd)"
  punctuation:        "[`lpeg.patterns.punctuation`](/pages/lpeg/index.qmd)"
  quoted_content:     "[`lpeg.patterns.quoted_content`](/pages/lpeg/index.qmd)"
  quoted:             "[`lpeg.patterns.quoted`](/pages/lpeg/index.qmd)"
  sign:               "[`lpeg.patterns.sign`](/pages/lpeg/index.qmd)"
  single_quoted_content: "[`lpeg.patterns.single_quoted_content`](/pages/lpeg/index.qmd)"
  single_quoted:      "[`lpeg.patterns.single_quoted`](/pages/lpeg/index.qmd)"
  to_eol:             "[`lpeg.to_eol`](/pages/lpeg/index.qmd)"
  tokenizer:          "[`lpeg.tokenizer`](/pages/lpeg/index.qmd)"
  trim_ws:            "[`lpeg.patterns.trim_ws`](/pages/lpeg/index.qmd)"
  unescape:           "[`lpeg.unescape`](/pages/lpeg/index.qmd)"
  upper:              "[`lpeg.patterns.upper`](/pages/lpeg/index.qmd)"
  ws:                 "[`lpeg.patterns.ws`](/pages/lpeg/index.qmd)"

# Formatted links for the functions in the `table` module.
table:
  clone:              "[`table.clone`](/pages/table/copy.qmd)"
  common_keys:        "[`table.common_keys`](/pages/table/union.qmd)"
  common_values:      "[`table.common_values`](/pages/table/union.qmd)"
  compare:            "[`table.compare`](/pages/table/ordered_pairs.qmd)"
  contains:           "[`table.contains`](/pages/table/find.qmd)"
  copy:               "[`table.copy`](/pages/table/copy.qmd)"
  counts:             "[`table.counts`](/pages/table/keys-values.qmd)"
  difference:         "[`table.difference`](/pages/table/union.qmd)"
  eq:                 "[`table.eq`](/pages/table/eq.qmd)"
  find:               "[`table.find`](/pages/table/find.qmd)"
  find_if:            "[`table.find_if`](/pages/table/find.qmd)"
  intersection:       "[`table.intersection`](/pages/table/union.qmd)"
  is_array:           "[`table.is_array`](/pages/table/queries.qmd)"
  is_array_of:        "[`table.is_array_of`](/pages/table/queries.qmd)"
  is_array_of_numbers:  "[`table.is_array_of_numbers`](/pages/table/queries.qmd)"
  is_array_of_one_type: "[`table.is_array_of_one_type`](/pages/table/queries.qmd)"
  is_array_of_strings:  "[`table.is_array_of_strings`](/pages/table/queries.qmd)"
  is_table:           "[`table.is_table`](/pages/table/queries.qmd)"
  keys:               "[`table.keys`](/pages/table/keys-values.qmd)"
  kv_map:             "[`table.kv_map`](/pages/table/map.qmd)"
  map:                "[`table.map`](/pages/table/map.qmd)"
  map2:               "[`table.map2`](/pages/table/map.qmd)"
  merged_keys:        "[`table.merged_keys`](/pages/table/union.qmd)"
  merged_values:      "[`table.merged_values`](/pages/table/union.qmd)"
  metadata:           "[`table.metadata`](/pages/table/queries.qmd)"
  ordered_pairs:      "[`table.ordered_pairs`](/pages/table/ordered_pairs.qmd)"
  size:               "[`table.size`](/pages/table/queries.qmd)"
  transform:          "[`table.transform`](/pages/table/map.qmd)"
  union:              "[`table.union`](/pages/table/union.qmd)"
  unique_keys:        "[`table.unique_keys`](/pages/table/union.qmd)"
  unique_values:      "[`table.unique_values`](/pages/table/union.qmd)"
  values:             "[`table.values`](/pages/table/keys-values.qmd)"
  set_of_keys:        "[`table.set_of_keys`](/pages/table/keys-values.qmd)"
  set_of_values:      "[`table.set_of_values`](/pages/table/keys-values.qmd)"

# Formatted links for the functions in the `Array` class.
Array:
  __call:             "[`Array.__call`](/pages/Array/meta.qmd)"
  __concat:           "[`Array.__concat`](/pages/Array/meta.qmd)"
  __eq:               "[`Array:.__eq`](/pages/Array/meta.qmd)"
  __name:             "[`Array.__name`](/pages/Array/meta.qmd)"
  __tostring:         "[`Array.__tostring`](/pages/Array/meta.qmd)"
  all:                "[`Array:all`](/pages/Array/search.qmd)"
  alt:                "[`Array:alt`](/pages/Array/to_string.qmd)"
  any:                "[`Array:any`](/pages/Array/search.qmd)"
  append:             "[`Array:append`](/pages/Array/change.qmd)"
  at:                 "[`Array:at`](/pages/Array/at.qmd)"
  clear:              "[`Array:clear`](/pages/Array/change.qmd)"
  clone:              "[`Array:clone`](/pages/Array/copy.qmd)"
  copy:               "[`Array:copy`](/pages/Array/copy.qmd)"
  counts:             "[`Array:counts`](/pages/Array/counts.qmd)"
  delete:             "[`Array:delete`](/pages/Array/change.qmd)"
  delete_if:          "[`Array:delete_if`](/pages/Array/change.qmd)"
  difference:         "[`Array:difference`](/pages/Array/union.qmd)"
  drop:               "[`Array:drop`](/pages/Array/sub.qmd)"
  drop_duplicates:    "[`Array:drop_duplicates`](/pages/Array/sub.qmd)"
  drop_if:            "[`Array:drop_if`](/pages/Array/sub.qmd)"
  eq:                 "[`Array:eq`](/pages/Array/eq.qmd)"
  extreme:            "[`Array:extreme`](/pages/Array/max.qmd)"
  final:              "[`Array:final`](/pages/Array/at.qmd)"
  find:               "[`Array:find`](/pages/Array/search.qmd)"
  find_if:            "[`Array:find_if`](/pages/Array/search.qmd)"
  first:              "[`Array:first`](/pages/Array/at.qmd)"
  flatten:            "[`Array:flatten`](/pages/Array/flatten.qmd)"
  fold:               "[`Array:fold`](/pages/Array/fold.qmd)"
  inline:             "[`Array:inline`](/pages/Array/to_string.qmd)"
  inline_json:        "[`Array:inline_json`](/pages/Array/to_string.qmd)"
  insert:             "[`Array:insert`](/pages/Array/change.qmd)"
  intersection:       "[`Array:intersection`](/pages/Array/union.qmd)"
  is_array_of:        "[`Array:is_array_of`](/pages/Array/is_array_of.qmd)"
  is_array_of_numbers: "[`Array:is_array_of_numbers`](/pages/Array/is_array_of.qmd)"
  is_array_of_one_type: "[`Array:is_array_of_one_type`](/pages/Array/is_array_of.qmd)"
  is_array_of_strings: "[`Array:is_array_of_strings`](/pages/Array/is_array_of.qmd)"
  is_empty:           "[`Array:is_empty`](/pages/Array/size.qmd)"
  is_instance:        "[`Array:is_instance`](/pages/Array/meta.qmd)"
  json:               "[`Array:json`](/pages/Array/to_string.qmd)"
  keep:               "[`Array:keep`](/pages/Array/change.qmd)"
  keep_if:            "[`Array:keep_if`](/pages/Array/change.qmd)"
  map:                "[`Array:map`](/pages/Array/map.qmd)"
  max:                "[`Array:max`](/pages/Array/max.qmd)"
  min:                "[`Array:min`](/pages/Array/max.qmd)"
  most:               "[`Array:most`](/pages/Array/sub.qmd)"
  name:               "[`Array:name`](/pages/Array/meta.qmd)"
  new:                "[`Array:new`](/pages/Array/constructors.qmd)"
  new_instance:       "[`Array:new_instance`](/pages/Array/constructors.qmd)"
  none:               "[`Array:none`](/pages/Array/search.qmd)"
  pop:                "[`Array:pop`](/pages/Array/change.qmd)"
  pretty:             "[`Array:pretty`](/pages/Array/to_string.qmd)"
  push:               "[`Array:push`](/pages/Array/change.qmd)"
  random:             "[`Array:random`](/pages/Array/at.qmd)"
  range:              "[`Array:range`](/pages/Array/constructors.qmd)"
  reduce:             "[`Array:reduce`](/pages/Array/fold.qmd)"
  remove:             "[`Array:remove`](/pages/Array/change.qmd)"
  rep:                "[`Array:rep`](/pages/Array/constructors.qmd)"
  reverse:            "[`Array:reverse`](/pages/Array/change.qmd)"
  find_reverse:       "[`Array:find_reverse`](/pages/Array/search.qmd)"
  find_if_reverse:    "[`Array:find_if_reverse`](/pages/Array/search.qmd)"
  rest:               "[`Array:rest`](/pages/Array/sub.qmd)"
  reversed:           "[`Array:reversed`](/pages/Array/change.qmd)"
  reverse:            "[`Array:reverse`](/pages/Array/change.qmd)"
  shuffle:            "[`Array:shuffle`](/pages/Array/change.qmd)"
  size:               "[`Array:size`](/pages/Array/size.qmd)"
  sort:               "[`Array:sort`](/pages/Array/change.qmd)"
  subclass:           "[`Array:subclass`](/pages/Array/constructors.qmd)"
  take:               "[`Array:take`](/pages/Array/sub.qmd)"
  take_if:            "[`Array:take_if`](/pages/Array/sub.qmd)"
  to_map:             "[`Array:to_map`](/pages/Array/counts.qmd)"
  to_set:             "[`Array:to_set`](/pages/Array/counts.qmd)"
  transform:          "[`Array:transform`](/pages/Array/map.qmd)"
  union:              "[`Array:union`](/pages/Array/union.qmd)"
  zip:                "[`Array:zip`](/pages/Array/zip.qmd)"

# Formatted links for the functions in the `Enum` class.
Enum:
  __tostring:         "[`Enum:__tostring`](/pages/Enum/to_string.qmd)"
  add_enumerator:     "[`Enum:add_enumerator`](/pages/Enum/add_mt.qmd)"
  count:              "[`Enum:count`](/pages/Enum/iter.qmd)"
  inline:             "[`Enum:inline`](/pages/Enum/to_string.qmd)"
  is_instance:        "[`Enum:is_instance`](/pages/Enum/type.qmd)"
  iter:               "[`Enum:iter`](/pages/Enum/iter.qmd)"
  mt:                 "[`Enum:mt`](/pages/Enum/mt.qmd)"
  new:                "[`Enum:new`](/pages/Enum/constructors.qmd)"
  pretty:             "[`Enum:pretty`](/pages/Enum/to_string.qmd)"
  set_type:           "[`Enum:set_type`](/pages/Enum/type.qmd)"
  tostring:           "[`Enum:tostring`](/pages/Enum/to_string.qmd)"
  type:               "[`Enum:type`](/pages/Enum/type.qmd)"

# The `ENUM` global function that can be used to create an `Enum`.
ENUM:                 "[`ENUM`](/pages/Enum/constructors.qmd)"

# Formatted links for the functions in the `Enumerator` class.
Enumerator:
  __eq:               "[`Enumerator:__eq`](/pages/Enum/mt.qmd)"
  __le:               "[`Enumerator:__le`](/pages/Enum/mt.qmd)"
  __lt:               "[`Enumerator:__lt`](/pages/Enum/mt.qmd)"
  __index:            "[`Enumerator:__index`](/pages/Enum/mt.qmd)"
  __newindex:         "[`Enumerator:__newindex`](/pages/Enum/mt.qmd)"
  __tostring:         "[`Enumerator:__tostring`](/pages/Enum/mt.qmd)"
  is_a:               "[`Enumerator:is_a`](/pages/Enum/mt.qmd)"
  tonumber:           "[`Enumerator:tonumber`](/pages/Enum/mt.qmd)"
  tostring:           "[`Enumerator:tostring`](/pages/Enum/mt.qmd)"
