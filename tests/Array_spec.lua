----------------------------------------------------------------------------------------------------------------------
-- Busted tests for the `lulu.Array` module.
--
-- SPDX-FileCopyrightText:  2025 Nessan Fitzmaurice <nzznfitz+gh@icloud.com>
-- SPDX-License-Identifier: MIT
-----------------------------------------------------------------------------------------------------------------------

-- Add "." and ".." to the package path for relative requires.
local dot = debug.getinfo(1, 'S').source:match [[^@?(.*[\/])[^\/]-$]] or "./"
package.path = dot .. "?.lua;" .. dot .. "../?.lua;" .. package.path

local busted = require('busted')
local describe, it = busted.describe, busted.it
local assert = require('luassert')

local Array = require('lulu.Array')

describe("Array class", function()
    describe("constructors", function()
        it("creates an empty array with Array:new()", function()
            local arr = Array:new()
            assert.are.same({}, arr)
            assert.is_true(Array:is_instance(arr))
        end)

        it("creates an array from a table with Array:new()", function()
            local t = { 1, 2, 3 }
            local arr = Array:new(t)
            assert.are.same(t, arr)
            assert.is_true(Array:is_instance(arr))
        end)

        it("creates an array with repeated values using Array:rep()", function()
            local arr = Array:rep(3, "x")
            assert.are.same({ "x", "x", "x" }, arr)
            assert.is_true(Array:is_instance(arr))
        end)

        it("creates a range array using Array:range()", function()
            local arr = Array:range(1, 3)
            assert.are.same({ 1, 2, 3 }, arr)
            assert.is_true(Array:is_instance(arr))
        end)

        it("creates a subclass of Array", function()
            local MyArray = Array:subclass("MyArray")
            local arr = MyArray:new({ 1, 2, 3 })
            assert.is_true(MyArray:is_instance(arr))
            assert.is_true(Array:is_instance(arr))
            assert.are.equal("MyArray", arr:name())
        end)
    end)

    describe("metamethods", function()
        it("concatenates arrays using .. operator", function()
            local a1 = Array:new({ 1, 2 })
            local a2 = Array:new({ 3, 4 })
            local result = a1 .. a2
            assert.are.same({ 1, 2, 3, 4 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("compares arrays for equality using == operator", function()
            local a1 = Array:new({ 1, 2, 3 })
            local a2 = Array:new({ 1, 2, 3 })
            local a3 = Array:new({ 1, 2, 4 })

            assert.is_true(a1 == a2)
            assert.is_false(a1 == a3)
        end)

        it("converts array to string using tostring()", function()
            local arr = Array:new({ 1, 2, 3 })
            local str = tostring(arr)
            assert.is_true(type(str) == "string")
            assert.equals(str, "[ 1, 2, 3 ]")
        end)
    end)

    describe("basic operations", function()
        it("gets array size", function()
            local arr = Array:new({ 1, 2, 3 })
            assert.are.equal(3, arr:size())
        end)

        it("gets element at index", function()
            local arr = Array:new({ 1, 2, 3 })
            assert.are.equal(2, arr:at(2))
        end)

        it("maps over array elements", function()
            local arr = Array:new({ 1, 2, 3 })
            local result = arr:map(function(x) return x * 2 end)
            assert.are.same({ 2, 4, 6 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("reduces array elements", function()
            local arr = Array:new({ 1, 2, 3 })
            local result = arr:reduce(function(acc, x) return acc + x end, 0)
            assert.are.equal(6, result)
        end)

        it("zips arrays together", function()
            local a1 = Array:new({ 1, 2, 3 })
            local a2 = Array:new({ "a", "b", "c" })
            local result = a1:zip(a2)
            assert.are.same({ { 1, "a" }, { 2, "b" }, { 3, "c" } }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("finds maximum value", function()
            local arr = Array:new({ 3, 1, 4, 1, 5 })
            assert.are.equal(5, arr:max())
        end)
    end)

    describe("search operations", function()
        it("finds element in array", function()
            local arr = Array:new({ 1, 2, 3 })
            assert.are.equal(2, arr:find(2))
            assert.is_nil(arr:find(4))
        end)

        it("counts occurrences of elements", function()
            local arr = Array:new({ 1, 2, 2, 3, 2 })
            local counts = arr:counts()
            assert.are.same({ [1] = 1, [2] = 3, [3] = 1 }, counts)
        end)

        it("searches array with custom predicate", function()
            local arr = Array:new({ 1, 2, 3, 4, 5 })
            local result = arr:any(function(x) return x > 3 end)
            assert.is_true(result)
        end)

        it("returns false when predicate matches nothing", function()
            local arr = Array:new({ 1, 2, 3, 4, 5 })
            local result = arr:any(function(x) return x > 10 end)
            assert.is_false(result)
        end)
    end)

    describe("modification operations", function()
        it("copies array", function()
            local arr = Array:new({ 1, 2, 3 })
            local copy = arr:copy()
            assert.are.same(arr, copy)
            assert.is_true(Array:is_instance(copy))
        end)

        it("flattens nested arrays", function()
            local arr = Array:new({ 1, Array:new({ 2, 3 }), 4 })
            local flat = arr:flatten()
            assert.are.same({ 1, 2, 3, 4 }, flat)
            assert.is_true(Array:is_instance(flat))
        end)

        it("creates union of arrays", function()
            local a1 = Array:new({ 1, 2, 3 })
            local a2 = Array:new({ 3, 4, 5 })
            local result = a1:union(a2)
            assert.are.same({ 1, 2, 3, 4, 5 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("adds element to array", function()
            local arr = Array:new({ 1, 2, 3 })
            local result = arr:push(4)
            assert.are.same({ 1, 2, 3, 4 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("creates sub-array", function()
            local arr = Array:new({ 1, 2, 3, 4, 5 })
            local sub = arr:take(2, 4)
            assert.are.same({ 2, 3, 4 }, sub)
            assert.is_true(Array:is_instance(sub))
        end)

        it("stringifies array", function()
            local arr = Array:new({ 1, 2, 3 })
            local str = arr:inline()
            assert.are.equal("[ 1, 2, 3 ]", str)
        end)
    end)

    describe("edge cases", function()
        it("handles empty arrays", function()
            local arr = Array:new()
            assert.are.equal(0, arr:size())
            assert.is_nil(arr:at(1))
            assert.is_nil(arr:find(1))
            assert.are.same({}, arr:counts())
        end)

        it("handles single-element arrays", function()
            local arr = Array:new({ 1 })
            assert.are.equal(1, arr:size())
            assert.are.equal(1, arr:at(1))
            assert.are.equal(1, arr:find(1))
            assert.are.same({ [1] = 1 }, arr:counts())
        end)
    end)

    describe("additional array operations", function()
        it("filters array elements", function()
            local arr = Array:new({ 1, 2, 3, 4, 5 })
            local result = arr:take_if(function(x) return x % 2 == 0 end)
            assert.are.same({ 2, 4 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("finds minimum value", function()
            local arr = Array:new({ 3, 1, 4, 1, 5 })
            assert.are.equal(1, arr:min())
        end)

        it("reverses array elements", function()
            local arr = Array:new({ 1, 2, 3 })
            local result = arr:reverse()
            assert.are.same({ 3, 2, 1 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("checks if all elements satisfy condition", function()
            local arr = Array:new({ 2, 4, 6, 8 })
            local result = arr:all(function(x) return x % 2 == 0 end)
            assert.is_true(result)
        end)

        it("removes duplicate elements", function()
            local arr = Array:new({ 1, 2, 2, 3, 3, 3, 4 })
            local result = arr:drop_duplicates()
            assert.are.same({ 1, 2, 3, 4 }, result)
            assert.is_true(Array:is_instance(result))
        end)
    end)

    describe("array transformations", function()
        it("transforms array elements in place", function()
            local arr = Array:new({ 1, 2, 3 })
            local result = arr:transform(function(x) return x * 2 end)
            assert.are.same({ 2, 4, 6 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("flattens nested arrays", function()
            local arr = Array:new({ 1, Array:new({ 2, 3 }), 4 })
            local result = arr:flatten()
            assert.are.same({ 1, 2, 3, 4 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("flattens nested arrays with custom depth", function()
            local arr = Array:new({ 1, Array:new({ 2, Array:new({ 3, 4 }) }), 5 })
            local result = arr:flatten(2)
            assert.are.same({ 1, 2, 3, 4, 5 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("creates reversed copy without modifying original", function()
            local arr = Array:new({ 1, 2, 3 })
            local result = arr:reversed()
            assert.are.same({ 3, 2, 1 }, result)
            assert.are.same({ 1, 2, 3 }, arr)
            assert.is_true(Array:is_instance(result))
        end)
    end)

    describe("array set operations", function()
        it("creates intersection of arrays", function()
            local a1 = Array:new({ 1, 2, 3 })
            local a2 = Array:new({ 3, 4, 5 })
            local result = a1:intersection(a2)
            assert.are.same({ 3 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("creates difference between arrays", function()
            local a1 = Array:new({ 1, 2, 3 })
            local a2 = Array:new({ 3, 4, 5 })
            local result = a1:difference(a2)
            assert.are.same({ 1, 2 }, result)
            assert.is_true(Array:is_instance(result))
        end)

        it("creates symmetric difference between arrays", function()
            local a1 = Array:new({ 1, 2, 3 })
            local a2 = Array:new({ 3, 4, 5 })
            local result = a1:difference(a2, true)
            assert.are.same({ 1, 2, 4, 5 }, result)
            assert.is_true(Array:is_instance(result))
        end)
    end)

    describe("array statistics", function()
        it("counts element occurrences", function()
            local arr = Array:new({ "a", "b", "a", "c", "b" })
            local result = arr:counts()
            assert.are.same({ a = 2, b = 2, c = 1 }, result)
        end)

        it("creates set from array", function()
            local arr = Array:new({ "a", "b", "c" })
            local result = arr:to_set()
            assert.are.same({ a = true, b = true, c = true }, result)
        end)

        it("creates map from array", function()
            local arr = Array:new({ "a", "b", "c" })
            local result = arr:to_map()
            assert.are.same({ a = 1, b = 2, c = 3 }, result)
        end)
    end)
end)
